name: CI-CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devops360-app:latest .

      - name: Test Docker Container (Health Check)
        run: |
          docker run -d -p 8000:8000 --name test-app ${{ secrets.DOCKER_USERNAME }}/devops360-app:latest
          sleep 10  # Wait for the app to start
          curl -f http://localhost:8000/ || (docker logs test-app && exit 1)
          docker stop test-app
          docker rm test-app

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/devops360-app:latest

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_USERNAME }}/devops360-app:latest)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Write cosign.key to disk
        run: echo "${{ secrets.COSIGN_KEY }}" > cosign.key

      - name: Sign Docker Image by Digest
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --key cosign.key --yes ${{ steps.digest.outputs.digest }}

      - name: Securely delete cosign.key
        run: shred -u cosign.key

  deploy:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      # ... your build steps ...
      - name: Build Docker image
        run: |
          docker build -t myapp:latest .

      - name: Run container with env vars (for test, not prod)
        run: |
          docker run -d \
            --env DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }} \
            --env S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            --env COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }} \
            --env COGNITO_USER_POOL_CLIENT_ID=${{ secrets.COGNITO_USER_POOL_CLIENT_ID }} \
            myapp:latest